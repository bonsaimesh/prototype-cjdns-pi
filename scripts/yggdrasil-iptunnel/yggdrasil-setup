#!/usr/bin/env bash

# Enable forwarding for ipv4 and ipv6
echo 1 > /proc/sys/net/ipv4/ip_forward
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding

# Give yggdrasil enough time to create an ygg0 interface before we start adding routes
sleep 3
if [ -f /etc/yggdrasil.iptunnel.conf ]; then 
   touch /etc/yggdrasil.iptunnel.conf
fi
IPv6NAT=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" nat)
if [[ -z "$IPv6NAT" ]]; then
    IPv6NAT=true
    confset "iptunnel" "IPv6nat" "$IPv6NAT" /etc/yggdrasil.iptunnel.conf
fi

YGGINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "general" yggdrasil-interface)"
if [[ -z "${YGGINT}" ]]; then
    YGGINT="ygg0"
fi

IPv6SUBNETINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" subnet-interface)"
if [[ -z "${IPv6SUBNETINT}" ]]; then
    IPv6SUBNETINT="wlan-ap"
fi

if [ -e /etc/yggdrasil.iptunnel.server ]; then

    SUBNET4=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "iptunnel" subnet)
    if [[ -z "${SUBNET4}" ]]; then
        SUBNET4="10.10.0.0/24"
    fi
    SUBNET6=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" subnet)
    if [[ -z "${SUBNET6}" ]]; then
        SUBNET6="fd00::/64"
    fi
    EXITINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "general" exit-interface)"
    if [[ -z "${EXITINT}" ]]; then
        EXITINT="eth0"
    fi

    while read -r PUBLIC_KEY IP_ADDR IP6_ADDR IP6_SUBNET; do
        if [[ "${PUBLIC_KEY}" =~ ^[0-z]{64} ]]; then
            yggdrasilctl addRoute subnet="${IP_ADDR}/32" box_pub_key="${PUBLIC_KEY}"
            if [[ ! -z "${IP6_ADDR}" ]]; then
                yggdrasilctl addRoute subnet="${IP6_ADDR}/128" box_pub_key="${PUBLIC_KEY}"
                if [[ ! -z "${IP6_SUBNET}" ]]; then
                    yggdrasilctl addRoute subnet="${IP6_SUBNET}" box_pub_key="${PUBLIC_KEY}"
                    ip -6 route add "${IP6_SUBNET}" dev "${YGGINT}" || true
                fi
                isIPv6=true
            fi
        fi
    done < /etc/yggdrasil.iptunnel.server

    yggdrasilctl addLocalSubnet subnet="0.0.0.0/0"
    ip route add "${SUBNET4}" dev "${YGGINT}" || true

    if [[ "${isIPv6}" == true ]]; then
        yggdrasilctl addLocalSubnet subnet="::/0"
        # Add route for ygg0 interface
        ip -6 route add "${SUBNET6}" dev "${YGGINT}" || true
    fi

    # If no NAT (masquerading) being done, start doing it
    if [ -z "$(iptables -L POSTROUTING -v -n -t nat  | grep MASQUERADE)" ]; then
        iptables -t nat -A POSTROUTING -o "${EXITINT}" -j MASQUERADE
    fi
    # If no NAT (masquerading) being done, start doing it
    if [ -z "$(ip6tables -L POSTROUTING -v -n -t nat  | grep MASQUERADE)" ]; then
        if [[ ! "${IPv6NAT}" == false ]]; then
            iptables -t nat -A POSTROUTING -o "${EXITINT}" -j MASQUERADE
        fi
    fi
# Configure as Yggdrasil IPTunnel client if client file is present (this is simply a newline-separated list
# of Yggdrasil public keys in /etc/yggdrasil.iptunnel.client, each key indicating an IPTunnel exit server)
elif [ -e /etc/yggdrasil.iptunnel.client ]; then
 # Add each server to Yggdrasil IPTunnel connect-to's
     while read -r PUBLIC_KEY IP_ADDR IP6_ADDR IP6_SUBNET; do
        if [[ "${PUBLIC_KEY}" =~ ^[0-z]{64} ]]; then
            if [[ ! -z "${IP6_ADDR}" ]]; then
                ip addr add dev "${YGGINT}" "${IP6_ADDR}/128"
                yggdrasilctl addRoute subnet="::0/0" box_pub_key="${PUBLIC_KEY}"
                yggdrasilctl addLocalSubnet subnet="${IP6_ADDR}/128"
                if [[ ! -z "${IP6_SUBNET}" ]]; then
                        yggdrasilctl addLocalSubnet subnet="${IP6_SUBNET}"
                        ip -6 route add ${IP6_SUBNET} dev "${IPv6SUBNETINT}"
	                ip addr add dev "${IPv6SUBNETINT}" "$(echo  ${IP6_SUBNET} | sed "s/\/64/1/")"
                fi
            fi
            ip addr add dev "${YGGINT}" "${IP_ADDR}/32"
            yggdrasilctl addRoute subnet="0.0.0.0/0" box_pub_key="${PUBLIC_KEY}"
            yggdrasilctl addLocalSubnet subnet="${IP_ADDR}/32"
        fi
    done < /etc/yggdrasil.iptunnel.client

    # Remove NAT from eth0 if it exists
    iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE || true
    ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE || true

    # Route NAT traffic through to yggdrasil ygg0 interface to use iptunnel exit server
    iptables -t nat -A POSTROUTING -o "${YGGINT}" -j MASQUERADE
    if [[ ! "${IPv6NAT}" == false ]]; then
        ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
    fi

    # Special hack to change default route without removing original one
    route add  -net 0.0.0.0/1 "${YGGINT}"
    route add  -net 128.0.0.0/1 "${YGGINT}"
    ip -6 route add ::/0 dev "${YGGINT}"
fi
